set nocompatible " don't use vi default things
set number " show current line number
set relativenumber " show relative numbers
set laststatus=2
set hidden

call plug#begin()

"Nerd tree, only load when asked.
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }

"One dark theme.
Plug 'joshdick/onedark.vim'

Plug 'sheerun/vim-polyglot'

Plug 'itchyny/lightline.vim'
Plug 'ap/vim-buftabline'

Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

call plug#end()

syntax on

let mapleader = " "
set timeoutlen=200
inoremap <leader><leader> <esc>
vnoremap <leader><leader> <esc>
cnoremap <leader><leader> <C-C>
nnoremap U <C-R>

let g:lightline = {
	\ 'colorscheme': 'onedark',
	\ }

colorscheme onedark

" F2 to open nerdtree.
map <F2> :NERDTreeToggle<CR>
let NERDTreeWinSize=32
let NERDTreeWinPos="left"
let NERDTreeShowHidden=1
let NERDTreeAutoDeleteBuffer=1

" move between windows with control + hjkl
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
map gn :bnext<CR>
map gp :bprevious<CR>
map bc :bd<CR>

if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'allowlist': ['cpp', 'c'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> gN <plug>(lsp-next-error)
    nmap <buffer> gP <plug>(lsp-previous-error)
    nmap <buffer> ga <plug>(lsp-code-action)
    nmap <buffer> gk <plug>(lsp-document-format)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

